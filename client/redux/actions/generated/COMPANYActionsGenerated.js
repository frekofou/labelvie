/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN COMPANYActionsGenerated.js PLEASE EDIT ../COMPANYActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import COMPANYApi from "../../../api/COMPANYApi";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_COMPANY };
  },

  //CRUD METHODS

  // Create company
  createCOMPANY: function(company) {
    return function(dispatch) {
      return COMPANYApi
        .createCOMPANY(company)
        .then(company => {
          dispatch(actionsFunction.createCOMPANYSuccess(company));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createCOMPANYSuccess: function(company) {
    return { type: types.CREATE_COMPANY_SUCCESS, payload: company };
  },


  // Delete company
  deleteCOMPANY: function(id) {
    return function(dispatch) {
      return COMPANYApi
        .deleteCOMPANY(id)
        .then(company => {
          dispatch(actionsFunction.deleteCOMPANYSuccess(company));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteCOMPANYSuccess: function(company) {
    return { type: types.DELETE_COMPANY_SUCCESS, payload: company };
  },


  // Get company
  loadCOMPANY: function(id) {
    return function(dispatch) {
      return COMPANYApi
        .getOneCOMPANY(id)
        .then(company => {
          dispatch(actionsFunction.loadCOMPANYSuccess(company));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadCOMPANYSuccess: function(company) {
    return { type: types.GET_COMPANY_SUCCESS, payload: company };
  },

  // Load  list
  loadCOMPANYList: function() {
    return function(dispatch) {
      return COMPANYApi
        .getCOMPANYList()
        .then(list => {
          dispatch(actionsFunction.loadCOMPANYListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadCOMPANYListSuccess: function(list) {
    return { type: types.LIST_COMPANY_SUCCESS, payload: list };
  },

	
  // Save company
  saveCOMPANY: function(company) {
    return function(dispatch) {
      return COMPANYApi
        .saveCOMPANY(company)
        .then(company => {
          dispatch(actionsFunction.saveCOMPANYSuccess(company));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveCOMPANYSuccess: function(company) {
    return { type: types.UPDATE_COMPANY_SUCCESS, payload: company };
  },


};

export default actionsFunction;
